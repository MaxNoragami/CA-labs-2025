Microsoft (R) Macro Assembler Version 14.43.34809.0	    04/29/25 23:51:59
Code.asm						     Page 1 - 1


				;// ------------------------------------------------------------ -
				;// 2. AddVariables Program
				;// Modify the AddVariables program so it uses 64 - bit variables.
				;// Describe the syntax errors generated by the assembler and
				;// what steps you took to resolve the errors
				;// ------------------------------------------------------------ -
				.386
				.model flat, stdcall
				.stack 4096
				ExitProcess proto, dwExitCode:dword
 00000000			.data
 00000000			val1 QWORD 12345678h		;// Using QWORD(64 - bit) instead of DWORD
	   0000000012345678
 00000008			val2 QWORD 87654321h		;// Using QWORD(64 - bit) instead of DWORD
	   0000000087654321
 00000010			sum QWORD 0				;// Result will be 64 - bit
	   0000000000000000

				;// Adding new variables to demonstrate carry propagation
 00000018			val3 QWORD 00000001FFFFFFFFh	;// Upper: 00000001h, Lower: FFFFFFFFh
	   00000001FFFFFFFF
 00000020			val4 QWORD 0000000200000001h	;// Upper: 00000002h, Lower: 00000001h
	   0000000200000001
 00000028			sum2 QWORD 0;// Second result will be 64-bit
	   0000000000000000

 00000000			.code
 00000000			main proc
				;// Load the low 32 bits of val1 into EAX
 00000000  A1 00000000 R	mov eax, DWORD PTR val1
				;// Load the high 32 bits of val1 into EDX
 00000005  8B 15 00000004 R	mov edx, DWORD PTR val1 + 4
				;// Add the low 32 bits of val2 to EAX
 0000000B  03 05 00000008 R	add eax, DWORD PTR val2
				;// Add the high 32 bits of val2 to EDX with carry
 00000011  13 15 0000000C R	adc edx, DWORD PTR val2 + 4
				;// Store the low 32 bits of the result in sum
 00000017  A3 00000010 R	mov DWORD PTR sum, eax
				;// Store the high 32 bits of the result in sum + 4
 0000001C  89 15 00000014 R	mov DWORD PTR sum + 4, edx

				;// DEMONSTRATING CARRY PROPAGATION WITH NEW VARIABLES
				;// Load val3 into ECX (low 32 bits) and EBX (high 32 bits)
 00000022  8B 0D 00000018 R	mov ecx, DWORD PTR val3		;// Lower 32 bits (FFFFFFFFh)
 00000028  8B 1D 0000001C R	mov ebx, DWORD PTR val3 + 4	;// Upper 32 bits (00000001h)

				;// Add val4 to ECX:EBX pair
 0000002E  03 0D 00000020 R	add ecx, DWORD PTR val4;// Adding 00000001h to FFFFFFFFh (will generate carry)
 00000034  13 1D 00000024 R	adc ebx, DWORD PTR val4 + 4	;// Adding 00000002h to 00000001h plus carry

				;// Store the result in sum2
 0000003A  89 0D 00000028 R	mov DWORD PTR sum2, ecx
 00000040  89 1D 0000002C R	mov DWORD PTR sum2 + 4, ebx

				invoke ExitProcess, 0
 00000046  6A 00	   *	    push   +000000000h
 00000048  E8 00000000 E   *	    call   ExitProcess
 0000004D			main endp
				end main
Microsoft (R) Macro Assembler Version 14.43.34809.0	    04/29/25 23:51:59
Code.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000030 DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000004D DWord	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000004D Public STDCALL


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
sum2 . . . . . . . . . . . . . .	QWord	 00000028 _DATA	
sum  . . . . . . . . . . . . . .	QWord	 00000010 _DATA	
val1 . . . . . . . . . . . . . .	QWord	 00000000 _DATA	
val2 . . . . . . . . . . . . . .	QWord	 00000008 _DATA	
val3 . . . . . . . . . . . . . .	QWord	 00000018 _DATA	
val4 . . . . . . . . . . . . . .	QWord	 00000020 _DATA	

	   0 Warnings
	   0 Errors
