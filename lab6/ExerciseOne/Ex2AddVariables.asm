;-------------------------------------------------------------
; 2. AddVariables Program
; Modify the AddVariables program so it uses 64-bit variables.
; Describe the syntax errors generated by the assembler and
; what steps you took to resolve the errors
;-------------------------------------------------------------
section .data
    var1 dq 10000000000     ; 64-bit variable (QWORD)
    var2 dq 20000000000     ; 64-bit variable (QWORD)
    sum  dq 0               ; Result variable (QWORD)
    
    ; Format string for printf
    format db "Sum of %lld and %lld is %lld", 10, 0  ; %lld for 64-bit integers, 10=newline, 0=null terminator

section .text
global Start                 ; 'Start' is the default entry point for GoLink
extern printf
extern ExitProcess

Start:
    ; Add two 64-bit variables
    mov rax, [rel var1]     ; Load first value with usage of RAX instead of EAX
    add rax, [rel var2]     ; Then we add the second value
    mov [rel sum], rax      ; And store the result
    
    ; Display the result using printf
    lea rcx, [rel format]   ; Format string (1st parameter)
    mov rdx, [rel var1]     ; First value (2nd parameter)
    mov r8, [rel var2]      ; Second value (3rd parameter)
    mov r9, [rel sum]       ; Sum value (4th parameter)
    sub rsp, 32             ; Shadow space for Win64 calling convention
    xor rax, rax            ; No floating point arguments
    call printf
    add rsp, 32             ; Restore stack
   
    ; Exit program
    xor rcx, rcx            ; Exit code 0
    call ExitProcess
    ret                     ; Should never reach here